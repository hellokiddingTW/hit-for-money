/* eslint-disable react-refresh/only-export-components */
import CardBlackPng from "@/assets/card-blue-back.png";
import Icon, { type IIconProps } from "@/components/ui/Icon";

export type CardStatus = "close" | "open";

// prettier-ignore
export const cardSuits = ['1', '2', '3', '4'] as const

export type CardSuit = (typeof cardSuits)[number];

// prettier-ignore
export const cardRanks = [
  '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd'
] as const

export type CardRank = (typeof cardRanks)[number];

// prettier-ignore
export const cardStrings = [
  '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d',
  '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d',
  '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d',
  '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d',
] as const

export type CardString = (typeof cardStrings)[number];

export const toGameCard = (card: string) => {
  return {
    status: (card === "0" ? "close" : "open") as CardStatus,
    card: (card || "0") as CardString,
  };
};

export interface IGameCardProps {
  className?: string;
  iconProps: IIconProps;
  status: CardStatus;
  card: CardString;
}

const cardSuitsImageMap: { [key in CardSuit]: string } = {
  "1": '<path d="M28.1703 41.5213L41.4206 54.7716C45.0854 58.4309 45.0854 64.3683 41.4261 68.0275C37.8549 71.5988 32.1156 71.6813 28.4288 68.2807L30.0246 75.4011H28.1703V75.4066H26.3104L27.9007 68.2862C24.2249 71.6813 18.4856 71.6043 14.9144 68.033C11.2551 64.3738 11.2551 58.4364 14.9144 54.7771L28.1647 41.5213V41.5156L28.1675 41.5185L28.1703 41.5156V41.5213Z" fill="black"/>',
  "2": '<path d="M27.9345 72.6743L40.9687 59.6509C44.5638 56.0558 44.5638 50.2172 40.9687 46.6221C37.3628 43.027 31.5404 43.027 27.9345 46.6221C24.3395 43.027 18.5116 43.0269 14.9112 46.6274C11.3161 50.2225 11.3161 56.0558 14.9112 59.6508L27.9345 72.6688V72.6743Z" fill="#D92D20"/>',
  "3": '<path d="M40.489 56.6294C38.8508 54.9975 36.6771 54.2414 34.5411 54.3485C36.5825 51.2926 36.2549 47.1278 33.5582 44.4248C32.0145 42.8811 30.0108 42.125 28.0009 42.125C25.9909 42.125 23.9684 42.8874 22.4373 44.4311C19.7343 47.1278 19.4129 51.2989 21.4544 54.3548C19.3121 54.2477 17.1383 55.0038 15.5064 56.6357C12.438 59.7042 12.438 64.6881 15.5064 67.7566C18.5749 70.825 23.5588 70.825 26.6273 67.7566C27.1251 67.2525 27.5472 66.6917 27.8812 66.1058L25.9468 74.8071H30.0549L28.1206 66.1058C28.4545 66.6917 28.8767 67.2525 29.3745 67.7566C32.4429 70.825 37.4268 70.825 40.4953 67.7566C43.5638 64.6881 43.5638 59.7042 40.4953 56.6294H40.489Z" fill="black"/>',
  "4": '<path d="M27.9335 75.0933L42.3725 58.4697L27.9335 41.8516L27.8455 41.9561L13.5 58.4696L27.8455 74.9886L27.9335 75.0933Z" fill="#D92D20"/>',
};

const cardRankImageMap: { [key in CardRank]: string } = {
  "1": '<path d="M29.4888 32.0967H24.6147L22.6772 27.0562H13.8071L11.9756 32.0967H7.22266L15.8657 9.90625H20.6035L29.4888 32.0967ZM21.2393 23.3174L18.1816 15.083L15.1846 23.3174H21.2393Z" fill="black"/>',
  "2": '<path d="M25.6875 28.4219V32.5H10.2969C10.4635 30.9583 10.9635 29.5 11.7969 28.125C12.6302 26.7396 14.276 24.9062 16.7344 22.625C18.7135 20.7812 19.9271 19.5312 20.375 18.875C20.9792 17.9688 21.2812 17.0729 21.2812 16.1875C21.2812 15.2083 21.0156 14.4583 20.4844 13.9375C19.9635 13.4062 19.2396 13.1406 18.3125 13.1406C17.3958 13.1406 16.6667 13.4167 16.125 13.9688C15.5833 14.5208 15.2708 15.4375 15.1875 16.7188L10.8125 16.2812C11.0729 13.8646 11.8906 12.1302 13.2656 11.0781C14.6406 10.026 16.3594 9.5 18.4219 9.5C20.6823 9.5 22.4583 10.1094 23.75 11.3281C25.0417 12.5469 25.6875 14.0625 25.6875 15.875C25.6875 16.9062 25.5 17.8906 25.125 18.8281C24.7604 19.7552 24.1771 20.7292 23.375 21.75C22.8438 22.4271 21.8854 23.401 20.5 24.6719C19.1146 25.9427 18.2344 26.7865 17.8594 27.2031C17.4948 27.6198 17.1979 28.026 16.9688 28.4219H25.6875Z" fill="black"/>',
  "3": '<path d="M10.2031 25.9219L14.4531 25.4062C14.5885 26.4896 14.9531 27.3177 15.5469 27.8906C16.1406 28.4635 16.8594 28.75 17.7031 28.75C18.6094 28.75 19.3698 28.4062 19.9844 27.7188C20.6094 27.0312 20.9219 26.1042 20.9219 24.9375C20.9219 23.8333 20.625 22.9583 20.0312 22.3125C19.4375 21.6667 18.7135 21.3438 17.8594 21.3438C17.2969 21.3438 16.625 21.4531 15.8438 21.6719L16.3281 18.0938C17.5156 18.125 18.4219 17.8698 19.0469 17.3281C19.6719 16.776 19.9844 16.0469 19.9844 15.1406C19.9844 14.3698 19.7552 13.7552 19.2969 13.2969C18.8385 12.8385 18.2292 12.6094 17.4688 12.6094C16.7188 12.6094 16.0781 12.8698 15.5469 13.3906C15.0156 13.9115 14.6927 14.6719 14.5781 15.6719L10.5312 14.9844C10.8125 13.599 11.2344 12.4948 11.7969 11.6719C12.3698 10.8385 13.1615 10.1875 14.1719 9.71875C15.1927 9.23958 16.3333 9 17.5938 9C19.75 9 21.4792 9.6875 22.7812 11.0625C23.8542 12.1875 24.3906 13.4583 24.3906 14.875C24.3906 16.8854 23.2917 18.4896 21.0938 19.6875C22.4062 19.9688 23.4531 20.599 24.2344 21.5781C25.026 22.5573 25.4219 23.7396 25.4219 25.125C25.4219 27.1354 24.6875 28.849 23.2188 30.2656C21.75 31.6823 19.9219 32.3906 17.7344 32.3906C15.6615 32.3906 13.9427 31.7969 12.5781 30.6094C11.2135 29.4115 10.4219 27.849 10.2031 25.9219Z" fill="black"/>',
  "4": '<path d="M18.9688 32.5V27.8906H9.59375V24.0469L19.5312 9.5H23.2188V24.0312H26.0625V27.8906H23.2188V32.5H18.9688ZM18.9688 24.0312V16.2031L13.7031 24.0312H18.9688Z" fill="black"/>',
  "5": '<path d="M10.4219 26.1094L14.7969 25.6562C14.9219 26.6458 15.2917 27.4323 15.9062 28.0156C16.5208 28.5885 17.2292 28.875 18.0312 28.875C18.9479 28.875 19.724 28.5052 20.3594 27.7656C20.9948 27.0156 21.3125 25.8906 21.3125 24.3906C21.3125 22.9844 20.9948 21.9323 20.3594 21.2344C19.7344 20.526 18.9167 20.1719 17.9062 20.1719C16.6458 20.1719 15.5156 20.7292 14.5156 21.8438L10.9531 21.3281L13.2031 9.40625H24.8125V13.5156H16.5312L15.8438 17.4062C16.8229 16.9167 17.8229 16.6719 18.8438 16.6719C20.7917 16.6719 22.4427 17.3802 23.7969 18.7969C25.151 20.2135 25.8281 22.0521 25.8281 24.3125C25.8281 26.1979 25.2812 27.8802 24.1875 29.3594C22.6979 31.3802 20.6302 32.3906 17.9844 32.3906C15.8698 32.3906 14.1458 31.8229 12.8125 30.6875C11.4792 29.5521 10.6823 28.026 10.4219 26.1094Z" fill="black"/>',
  "6": '<path d="M25.2344 14.7031L20.9844 15.1719C20.8802 14.2969 20.6094 13.651 20.1719 13.2344C19.7344 12.8177 19.1667 12.6094 18.4688 12.6094C17.5417 12.6094 16.7552 13.026 16.1094 13.8594C15.474 14.6927 15.0729 16.4271 14.9062 19.0625C16 17.7708 17.3594 17.125 18.9844 17.125C20.8177 17.125 22.3854 17.8229 23.6875 19.2188C25 20.6146 25.6562 22.4167 25.6562 24.625C25.6562 26.9688 24.9688 28.849 23.5938 30.2656C22.2188 31.6823 20.4531 32.3906 18.2969 32.3906C15.9844 32.3906 14.0833 31.4948 12.5938 29.7031C11.1042 27.901 10.3594 24.9531 10.3594 20.8594C10.3594 16.6615 11.1354 13.6354 12.6875 11.7812C14.2396 9.92708 16.2552 9 18.7344 9C20.474 9 21.9115 9.48958 23.0469 10.4688C24.1927 11.4375 24.9219 12.849 25.2344 14.7031ZM15.2812 24.2812C15.2812 25.7083 15.6094 26.8125 16.2656 27.5938C16.9219 28.3646 17.6719 28.75 18.5156 28.75C19.3281 28.75 20.0052 28.4323 20.5469 27.7969C21.0885 27.1615 21.3594 26.1198 21.3594 24.6719C21.3594 23.1823 21.0677 22.0938 20.4844 21.4062C19.901 20.7083 19.1719 20.3594 18.2969 20.3594C17.4531 20.3594 16.7396 20.6927 16.1562 21.3594C15.5729 22.0156 15.2812 22.9896 15.2812 24.2812Z" fill="black"/>',
  "7": '<path d="M10.3594 13.9844V9.90625H25.375V13.0938C24.1354 14.3125 22.875 16.0625 21.5938 18.3438C20.3125 20.625 19.3333 23.0521 18.6562 25.625C17.9896 28.1875 17.6615 30.4792 17.6719 32.5H13.4375C13.5104 29.3333 14.1615 26.1042 15.3906 22.8125C16.6302 19.5208 18.2812 16.5781 20.3438 13.9844H10.3594Z" fill="black"/>',
  "8": '<path d="M14.125 19.6406C12.9896 19.1615 12.1615 18.5052 11.6406 17.6719C11.1302 16.8281 10.875 15.9062 10.875 14.9062C10.875 13.1979 11.4688 11.7865 12.6562 10.6719C13.8542 9.55729 15.5521 9 17.75 9C19.9271 9 21.6146 9.55729 22.8125 10.6719C24.0208 11.7865 24.625 13.1979 24.625 14.9062C24.625 15.9688 24.349 16.9167 23.7969 17.75C23.2448 18.5729 22.4688 19.2031 21.4688 19.6406C22.7396 20.151 23.7031 20.8958 24.3594 21.875C25.026 22.8542 25.3594 23.9844 25.3594 25.2656C25.3594 27.3802 24.6823 29.099 23.3281 30.4219C21.9844 31.7448 20.1927 32.4062 17.9531 32.4062C15.8698 32.4062 14.1354 31.8594 12.75 30.7656C11.1146 29.474 10.2969 27.7031 10.2969 25.4531C10.2969 24.2135 10.6042 23.0781 11.2188 22.0469C11.8333 21.0052 12.8021 20.2031 14.125 19.6406ZM15.0312 15.2188C15.0312 16.0938 15.276 16.776 15.7656 17.2656C16.2656 17.7552 16.9271 18 17.75 18C18.5833 18 19.25 17.7552 19.75 17.2656C20.25 16.7656 20.5 16.0781 20.5 15.2031C20.5 14.3802 20.25 13.724 19.75 13.2344C19.2604 12.7344 18.6094 12.4844 17.7969 12.4844C16.9531 12.4844 16.2812 12.7344 15.7812 13.2344C15.2812 13.7344 15.0312 14.3958 15.0312 15.2188ZM14.625 25.0312C14.625 26.2396 14.9323 27.1823 15.5469 27.8594C16.1719 28.5365 16.9479 28.875 17.875 28.875C18.7812 28.875 19.5312 28.5521 20.125 27.9062C20.7188 27.25 21.0156 26.3073 21.0156 25.0781C21.0156 24.0052 20.7135 23.1458 20.1094 22.5C19.5052 21.8438 18.7396 21.5156 17.8125 21.5156C16.7396 21.5156 15.9375 21.8854 15.4062 22.625C14.8854 23.3646 14.625 24.1667 14.625 25.0312Z" fill="black"/>',
  "9": '<path d="M10.4531 26.7031L14.7031 26.2344C14.8073 27.099 15.0781 27.7396 15.5156 28.1562C15.9531 28.5729 16.5312 28.7812 17.25 28.7812C18.1562 28.7812 18.9271 28.3646 19.5625 27.5312C20.1979 26.6979 20.6042 24.9688 20.7812 22.3438C19.6771 23.625 18.2969 24.2656 16.6406 24.2656C14.8385 24.2656 13.2812 23.5729 11.9688 22.1875C10.6667 20.7917 10.0156 18.9792 10.0156 16.75C10.0156 14.4271 10.7031 12.5573 12.0781 11.1406C13.4635 9.71354 15.224 9 17.3594 9C19.6823 9 21.5885 9.90104 23.0781 11.7031C24.5677 13.4948 25.3125 16.4479 25.3125 20.5625C25.3125 24.75 24.5365 27.7708 22.9844 29.625C21.4323 31.4792 19.4115 32.4062 16.9219 32.4062C15.1302 32.4062 13.6823 31.9323 12.5781 30.9844C11.474 30.026 10.7656 28.599 10.4531 26.7031ZM20.3906 17.1094C20.3906 15.6927 20.0625 14.5938 19.4062 13.8125C18.7604 13.0312 18.0104 12.6406 17.1562 12.6406C16.3438 12.6406 15.6667 12.9635 15.125 13.6094C14.5938 14.2448 14.3281 15.2917 14.3281 16.75C14.3281 18.2292 14.6198 19.3177 15.2031 20.0156C15.7865 20.7031 16.5156 21.0469 17.3906 21.0469C18.2344 21.0469 18.9427 20.7135 19.5156 20.0469C20.099 19.3802 20.3906 18.401 20.3906 17.1094Z" fill="black"/>',
  a: '<path d="M14.5625 32H10.1719V15.4531C8.56771 16.9531 6.67708 18.0625 4.5 18.7812V14.7969C5.64583 14.4219 6.89062 13.7135 8.23438 12.6719C9.57812 11.6198 10.5 10.3958 11 9H14.5625V32Z" fill="black"/><path d="M24.5625 9C26.7812 9 28.5156 9.79167 29.7656 11.375C31.2552 13.25 32 16.3594 32 20.7031C32 25.0365 31.25 28.151 29.75 30.0469C28.5104 31.6094 26.7812 32.3906 24.5625 32.3906C22.3333 32.3906 20.5365 31.5365 19.1719 29.8281C17.8073 28.1094 17.125 25.0521 17.125 20.6562C17.125 16.3438 17.875 13.2396 19.375 11.3438C20.6146 9.78125 22.3438 9 24.5625 9ZM24.5625 12.6406C24.0312 12.6406 23.5573 12.8125 23.1406 13.1562C22.724 13.4896 22.401 14.0938 22.1719 14.9688C21.8698 16.1042 21.7188 18.0156 21.7188 20.7031C21.7188 23.3906 21.8542 25.2396 22.125 26.25C22.3958 27.25 22.7344 27.9167 23.1406 28.25C23.5573 28.5833 24.0312 28.75 24.5625 28.75C25.0938 28.75 25.5677 28.5833 25.9844 28.25C26.401 27.9062 26.724 27.2969 26.9531 26.4219C27.2552 25.2969 27.4062 23.3906 27.4062 20.7031C27.4062 18.0156 27.2708 16.1719 27 15.1719C26.7292 14.1615 26.3854 13.4896 25.9688 13.1562C25.5625 12.8125 25.0938 12.6406 24.5625 12.6406Z" fill="black"/>',
  b: '<path d="M20.5938 9.09375H25.2031V23.5938C25.2031 25.4896 25.0365 26.9479 24.7031 27.9688C24.2552 29.3021 23.4427 30.375 22.2656 31.1875C21.0885 31.9896 19.5365 32.3906 17.6094 32.3906C15.349 32.3906 13.6094 31.7604 12.3906 30.5C11.1719 29.2292 10.5573 27.3698 10.5469 24.9219L14.9062 24.4219C14.9583 25.7344 15.151 26.6615 15.4844 27.2031C15.9844 28.026 16.7448 28.4375 17.7656 28.4375C18.7969 28.4375 19.526 28.1458 19.9531 27.5625C20.3802 26.9688 20.5938 25.7448 20.5938 23.8906V9.09375Z" fill="black"/>',
  c: '<path d="M25.7656 28.5938C26.901 29.4062 28.1354 30.0521 29.4688 30.5312L27.7656 33.7969C27.0677 33.5885 26.3854 33.3021 25.7188 32.9375C25.5729 32.8646 24.5469 32.1875 22.6406 30.9062C21.1406 31.5625 19.4792 31.8906 17.6562 31.8906C14.1354 31.8906 11.375 30.8542 9.375 28.7812C7.38542 26.7083 6.39062 23.7969 6.39062 20.0469C6.39062 16.3073 7.39062 13.401 9.39062 11.3281C11.3906 9.24479 14.1042 8.20312 17.5312 8.20312C20.9271 8.20312 23.6198 9.24479 25.6094 11.3281C27.599 13.401 28.5938 16.3073 28.5938 20.0469C28.5938 22.026 28.3177 23.7656 27.7656 25.2656C27.349 26.4115 26.6823 27.5208 25.7656 28.5938ZM22.0469 25.9844C22.6406 25.2865 23.0833 24.4427 23.375 23.4531C23.6771 22.4635 23.8281 21.3281 23.8281 20.0469C23.8281 17.401 23.2448 15.4271 22.0781 14.125C20.9115 12.8125 19.3854 12.1562 17.5 12.1562C15.6146 12.1562 14.0833 12.8125 12.9062 14.125C11.7396 15.4375 11.1562 17.4115 11.1562 20.0469C11.1562 22.724 11.7396 24.7292 12.9062 26.0625C14.0833 27.3854 15.5677 28.0469 17.3594 28.0469C18.026 28.0469 18.6562 27.9375 19.25 27.7188C18.3125 27.1042 17.3594 26.625 16.3906 26.2812L17.6875 23.6406C19.2083 24.1615 20.6615 24.9427 22.0469 25.9844Z" fill="black"/>',
  d: '<path d="M7.39062 32.5V9.59375H12.0156V19.7656L21.3594 9.59375H27.5781L18.9531 18.5156L28.0469 32.5H22.0625L15.7656 21.75L12.0156 25.5781V32.5H7.39062Z" fill="black"/>',
};

const drawCardSvg = (card: CardString) => {
  let svgStr =
    '<svg width="56" height="82" viewBox="0 0 56 82" fill="none" xmlns="http://www.w3.org/2000/svg">';
  svgStr += `<rect width="56" height="82" rx="6" fill="white"/>`;
  if (card) {
    const [x, y] = card.split("");
    const suit = cardSuitsImageMap[x as CardSuit];
    let rank = cardRankImageMap[y as CardRank];
    if (x === "2" || x === "4") {
      rank = rank.replace(/black/g, "#D92D20");
    }
    svgStr += suit + rank;
  }
  svgStr += "</svg>";
  const svg = new Blob([svgStr], { type: "image/svg+xml" });
  const url = URL.createObjectURL(svg);
  return url;
};

// preload all cards in memory
type CardSvgMap = { [key in CardString]: string };
/* eslint-disable */
let cachedCardSvgs = {} as CardSvgMap;

export const drawAllCards = (): Promise<void> => {
  return new Promise((resolve) => {
    for (let i = 0; i < cardSuits.length; i++) {
      for (let y = 0; y < cardRanks.length; y++) {
        const c: CardString = `${cardSuits[i]}${cardRanks[y]}` as CardString;
        cachedCardSvgs[c] = drawCardSvg(c);
      }
    }
    resolve();
  });
};

const GameCard = (props: IGameCardProps) => {
  const { className, status = "open", card, iconProps } = props;
  if (status === "close")
    return (
      <Icon className={className} {...iconProps}>
        <img src={CardBlackPng} />
      </Icon>
    );

  const url = cachedCardSvgs[card] || drawCardSvg(card) || "";
  return (
    <Icon className={className} {...iconProps}>
      <img className={className} src={url} alt={`card-${card}`} />
    </Icon>
  );
};

export const CardCodeToImageIndex = (code: string) => {
  if (code === "" || code === undefined) return "0";
  let index = 0;
  let remain = "";
  // check symbol
  if (code.startsWith("club")) {
    index = 0;
    remain = code.substring(5);
  } else if (code.startsWith("hearts")) {
    index = 13;
    remain = code.substring(7);
  } else if (code.startsWith("spade")) {
    index = 13 * 2;
    remain = code.substring(6);
  } else if (code.startsWith("diamonds")) {
    index = 13 * 3;
    remain = code.substring(9);
  }
  // check point
  if (remain === "a") {
    index += 1;
  } else if (remain === "j") {
    index += 11;
  } else if (remain === "q") {
    index += 12;
  } else if (remain === "k") {
    index += 13;
  } else {
    index += parseInt(remain);
  }
  return cardStrings[index];
};

export default GameCard;
